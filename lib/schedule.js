// Generated by CoffeeScript 1.6.3
(function() {
  var Schedule, crypto, schedule, zmq;

  zmq = require('zmq');

  crypto = require('crypto');

  Schedule = (function() {
    var clientId, clientLen, initialized, requester, subscriber, tasks;

    function Schedule() {}

    requester = null;

    subscriber = null;

    initialized = false;

    tasks = {};

    clientId = process.pid.toString();

    clientLen = clientId.length;

    Schedule.prototype.initialize = function(options) {
      var debug, req, sub;
      if (!initialized) {
        req = options.req, sub = options.sub, debug = options.debug;
        if (!((req != null) && (sub != null))) {
          throw new Error("req and sub could not be empty!");
        }
        requester = zmq.socket('req');
        subscriber = zmq.socket('sub');
        requester.connect(req);
        subscriber.connect(sub);
        subscriber.on('message', function(msg) {
          var e, task;
          msg = msg.slice(clientLen);
          if (debug) {
            console.log(new Date, msg.toString());
          }
          try {
            task = JSON.parse(msg);
          } catch (_error) {
            e = _error;
            return false;
          }
          if ((task.callbackId != null) && (tasks[task.callbackId] != null)) {
            return tasks[task.callbackId](task.callbackData || {});
          }
        });
        subscriber.subscribe(clientId);
        initialized = true;
      }
      return this;
    };

    /*
    Schedule async tasks
    @schedule `Date` `required` Schedule date string or timestamp
    @callback `Mixed` `required` Callback function
    @callbackData `Mixed` `optional` Callback data
    @taskId `String` `optional` Task identify; without this property, cancel will not work
    @callbackId `String` `optional` Specific callback id
    @jobs `Mixed` `optional` Run jobs on thorbuster process; Must be pre-defined on thorbuster
    */


    Schedule.prototype.schedule = function(data) {
      var callback, callbackData;
      if (data == null) {
        data = {};
      }
      callback = data.callback, callbackData = data.callbackData;
      if (callbackData == null) {
        callbackData = {};
      }
      if (!initialized) {
        if (callback != null) {
          return callback(callbackData);
        }
      }
      if (callback != null) {
        if (data.callbackId == null) {
          data.callbackId = this.sha1(callback);
        }
      }
      data.clientId = clientId;
      delete data.callback;
      requester.send(JSON.stringify(data));
      return tasks[data.callbackId] = callback;
    };

    /*
    Cancel scheduled tasks
    @taskId `String` `required` Task identify
    */


    Schedule.prototype.cancel = function(data) {
      var _data;
      if (data.taskId == null) {
        return false;
      }
      _data = {
        taskId: data.taskId,
        jobs: ['cancel'],
        schedule: new Date()
      };
      return requester.send(JSON.stringify(_data));
    };

    Schedule.prototype.sha1 = function(any) {
      return crypto.createHash('md5').update(any.toString()).digest('hex');
    };

    return Schedule;

  })();

  schedule = new Schedule;

  schedule.Schedule = Schedule;

  module.exports = schedule;

}).call(this);
